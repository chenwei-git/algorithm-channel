-+[1] 直接插入排序
-+[1.1] 基本思想
每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序，直到无序表内所有元素插入为止。
-+[2] 代码
    public static void main(String[] args) {
        int[] array = new int[] { 9, 3, 7, 6, 1, 1, 2, 5 };
        // 对数组进行排序
        helper1(array);
        System.out.println(Arrays.toString(array));
    }

    private static void helper1(int[] array) {
        if (array == null || array.length <= 1) {
            return;
        }
        helper3(array, 0, array.length - 1);
    }

    private static void helper2(int[] array, int i, int j) {
        for (int n = i + 1; n <= j; n++) {
            int temp = array[n];
            int index = n;
            for (int m = i; m < n; m++) {
                if (temp < array[m]) {
                    index = m;
                    break;
                }
            }
            if (index != n) {
                for (int k = n - 1; k >= index; k--) {
                    array[k + 1] = array[k];
                }
                array[index] = temp;
            }
        }
    }

    private static void helper3(int[] array, int i, int j) {
        for (int n = i + 1; n <= j; n++) {
            int temp = array[n];
            int index = helper4(array, i, n - 1, temp);
            // System.out.printf("i:%s, n-1:%s, temp:%s, index:%s ---- ", i, n - 1, temp, index);
            // System.out.println(Arrays.toString(array));
            if (index != -1) {
                for (int k = n - 1; k >= index; k--) {
                    array[k + 1] = array[k];
                }
                array[index] = temp;
            }
        }
    }

    private static int helper4(int[] array, int i, int j, int temp) {
        if (i < j) {
            int index = (i + j) / 2;
            if (temp == array[index]) {
                return index + 1;
            } else if (temp < array[index]) {
                return helper4(array, i, index - 1, temp);
            } else {
                return helper4(array, index + 1, j, temp);
            }
        } else if (i == j) {
            if (temp >= array[i]) {
                return i + 1;
            } else {
                return i;
            }
        } else {
            return i;
        }
    }
